#!/bin/bash
# THIS DECLARATION IS TEMP WILL BE JUST A FUNCTIONS FILE


  ##################################
  # 	 POWER MENU FUNCTIONS	   #
  #  "Power today, for tomorrow!"  #
  ##################################


change_state_single() { 
	local DEV_NUM=${PDU_LOADS[$1]}		# Get the load number for snmpset
	local DEV_VAR=$(($1 + 1))		# This is to set new variables
	
	# Grab the current power state of the pod device we're querying
	local PREVIOUS_DEV_STATE=$(snmpwalk -v 2c -c tripplite ${PDU_IP} 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.4.1.${DEV_NUM} | awk -F ":" '{print $NF}' | awk '{$1=$1};1')
	
	# Just select the inverse command based on what the power state is
	if [[ $(echo $PREVIOUS_DEV_STATE) == 2 ]]; then
		local COMMAND=1
	elif [[ $(echo $PREVIOUS_DEV_STATE) == 1 ]]; then
		local COMMAND=2
	fi
		
	# snmpset the new power state
	snmpset -v 2c -c tripplite $PDU_IP 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.6.1.${DEV_NUM} i ${COMMAND} > /dev/null
	
	# Wait for the power state to update via snmp (it usually takes ~5 seconds but this gives us flexibility in when the updated state is shown in the menu)
	echo -n "  Updating power state"
	while [[ $(snmpwalk -v 2c -c tripplite ${PDU_IP} 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.4.1.${DEV_NUM} | awk '{print $NF}' | awk '{$1=$1};1' | grep $PREVIOUS_DEV_STATE) ]]; do
		echo -n "."
		sleep 1
	done
	
	# When complete, update the initial variable where the power state was stored
	export STATE_${DEV_VAR}=$(snmpwalk -v 2c -c tripplite 10.41.30.233 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.4.1.${DEV_NUM} | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')
}

change_state_all() { 
	local POWER_OPT=$1
	case $POWER_OPT in
		1) local WHAT_ME_DOING_QUESTION_MARK="OFF";;
		2) local WHAT_ME_DOING_QUESTION_MARK="ON";;
		3) local WHAT_ME_DOING_QUESTION_MARK="CYCLE";;
	esac
	
	local D=0; while [[ $D == 0 ]]; do
		read -p "  Are you sure you want to POWER ${WHAT_ME_DOING_QUESTION_MARK} all devices? [Y/N]: " choice
		case $choice in
			y|Y)	# Grab state of last outlet in pod group
				LAST_LOAD=$(snmpwalk -v 2c -c tripplite $PDU_IP 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.4.1.${PDU_LOADS[5]} | awk -F ":" '{print $NF}' | awk '{$1=$1};1')
				
				# Set power state for all loads in pod
				for load in "${PDU_LOADS[@]}"; do
					snmpset -v 2c -c tripplite $PDU_IP 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.6.1.${load} i $POWER_OPT &
				done
				
				# Wait for power state to change
				while [[ $(snmpwalk -v 2c -c tripplite $PDU_IP 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.4.1.${PDU_LOADS[5]} | awk '{print $NF}' | awk '{$1=$1};1' | grep $LAST_LOAD) ]]; do
					echo -n "."
				done
				
				for i in {1 2 3 4 5 6}; do
					export STATE_${i}=$(snmpwalk -v 2c -c tripplite $PDU_IP 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.4.1.${PDU_LOADS[$i]} | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')
				done
				
				local D=1
			;;
			n|N) local D=1; break;;
			*) echo "Invalid choice.";;
		esac
	done
}

# Function for DEVICES ###############################################################################

single_device() { 
	local D=0; while [[ $D == 0 ]]; do
		clear
			echo "
  Select a device to toggle ON/OFF:
  [1] R1  -- $STATE_1
  [2] R2  -- $STATE_2
  [3] R3  -- $STATE_3
  [4] SW1 -- $STATE_4
  [5] SW2 -- $STATE_5
  [6] SW3 -- $STATE_6
  
  [X] Cancel"
		read -p "  > " opt
		case $opt in
			1) change_state_single 0; local D=1;;
			2) change_state_single 1; local D=1;;
			3) change_state_single 2; local D=1;;
			4) change_state_single 3; local D=1;;
			5) change_state_single 4; local D=1;;
			6) change_state_single 5; local D=1;;
			x|X) local D=1; break;;
			*) clear;;
		esac
	done
}

all_devices() { 
	local D=0; while [[ $D == 0 ]]; do
		clear
		echo "
  What do you want to do?:
  [O] Power on all devices
  [F] Power off all devices
  [C] Power cycle all devices

  [X] Cancel"
			
		read -p "  > " opt
		case $opt in
			o|O) change_state_all 2;;
			f|F) change_state_all 1;;
			c|C) change_state_all 3;;
			x|X) local D=1; break;;
		esac
	done
}

# Get power states for menu ##########################################################################

get_power_states() { 
	LIST_STATES=$(snmpwalk -v 2c -c tripplite ${PDU_IP} 1.3.6.1.4.1.850.1.1.3.2.3.3.1.1.4.1)
	
	STATE_1=$(echo "$LIST_STATES" | grep "\<4.1.${PDU_LOADS[0]}\>" | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')	# R1
	STATE_2=$(echo "$LIST_STATES" | grep "\<4.1.${PDU_LOADS[1]}\>" | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')	# R2
	STATE_3=$(echo "$LIST_STATES" | grep "\<4.1.${PDU_LOADS[2]}\>" | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')	# R3
	STATE_4=$(echo "$LIST_STATES" | grep "\<4.1.${PDU_LOADS[3]}\>" | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')	# SW1
	STATE_5=$(echo "$LIST_STATES" | grep "\<4.1.${PDU_LOADS[4]}\>" | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')	# SW2
	STATE_6=$(echo "$LIST_STATES" | grep "\<4.1.${PDU_LOADS[5]}\>" | awk '{print $NF}' | sed 's/1/OFF/; s/2/ON/')	# SW3
}

# This function dynamically determines the pod the user is trying to control the power on (without having to set static variables)
process_pod() { 
	case $RACK in
		1) PDU1IP=10.41.30.233; PDU2IP=10.41.30.234;;
		2) PDU1IP=10.41.30.235; PDU2IP=10.41.30.236;;
		3) PDU1IP=10.41.30.237; PDU2IP=10.41.30.238;;
		4) PDU1IP=10.41.30.239; PDU2IP=10.41.30.240;;
	esac
	
	case $POD in
		1) PDU_IP=$PDU1IP; PDU_LOADS=(12 11 10 9 8 7);;			# Load 12 = R1; Load 7 = SW3
		2) PDU_IP=$PDU1IP; PDU_LOADS=(23 22 21 20 19 18);;		# PDU1 contains the RACK FAN @ Load 24
		3) PDU_IP=$PDU2IP; PDU_LOADS=(12 11 10 9 8 7);;
		4) PDU_IP=$PDU2IP; PDU_LOADS=(24 23 22 21 20 19);;		# PDU2 contains the CM @ Load 18
	esac
}


## Main menu ########################################################################################

power_menu() {
	process_pod
	get_power_states
	
	local D=0; while [[ $D == 0 ]]; do
		clear
		echo -e "
  Pod = $POD
  Rack = $RACK
  PDU IP = $PDU_IP
  +---------------------------------------+
  R1 Status:	$STATE_1
  R2 Status:	$STATE_2
  R3 Status:	$STATE_3
  SW1 Status:	$STATE_4
  SW2 Status:	$STATE_5
  SW3 Status:	$STATE_6

  [POWER MENU] ---------------------------+
  [1] Change power state of single device
  [2] Change power state of all devices
  [X] Return to main menu"
		
		read -p "  > " opt
		case $opt in
			1) single_device;;
			2) all_devices;;
			x|X) clear; local D=1; break;;
		esac
	done
}

# variable "POD" will be equal to the current user's pod, so keep that in mind :)
# for now I will temporarily set it to say I'm in pod1 on rack1
POD=1
RACK=1

power_menu
